# Import necessary libraries
import pandas as pd
import numpy as np

# Simulate data (skip this if you already have a CSV file loaded)
np.random.seed(42)
data = pd.DataFrame({
    'age': np.random.randint(20, 80, 500),
    'weight': np.random.randint(50, 100, 500),
    'heart_rate': np.random.randint(60, 100, 500),
    'systolic_bp': np.random.normal(120, 15, 500).astype(int),
    'diastolic_bp': np.random.normal(80, 10, 500).astype(int),
    'smoking_status': np.random.choice(['Never', 'Former', 'Current'], 500),
    'exercise_freq': np.random.choice(['Low', 'Moderate', 'High'], 500),
})

# Step 1: Check for missing values
print("Missing values:\n", data.isnull().sum())

# Step 2: One-hot encode categorical variables
data_encoded = pd.get_dummies(data, columns=['smoking_status', 'exercise_freq'], drop_first=True)

# Step 3: Split into features and target
# Let's predict systolic blood pressure
X = data_encoded.drop(['systolic_bp', 'diastolic_bp'], axis=1)
y = data_encoded['systolic_bp']  # or 'diastolic_bp' if predicting that

# Step 4: Train-test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# (Optional) Step 5: Feature scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Done!
print("Training features shape:", X_train_scaled.shape)
print("Testing features shape:", X_test_scaled.shape)
