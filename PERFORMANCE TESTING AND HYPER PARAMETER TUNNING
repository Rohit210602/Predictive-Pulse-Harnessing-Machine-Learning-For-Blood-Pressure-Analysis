# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report

# Simulate sample dataset
np.random.seed(42)
data = pd.DataFrame({
    'age_group': np.random.choice(['Young', 'Middle', 'Old'], 500),
    'weight_class': np.random.choice(['Underweight', 'Normal', 'Overweight'], 500),
    'smoker': np.random.choice(['Yes', 'No'], 500),
    'activity_level': np.random.choice(['Low', 'Medium', 'High'], 500),
    'bp_category': np.random.choice(['Normal', 'Prehypertension', 'Hypertension'], 500)
})

# Encode categorical features
label_encoders = {}
for col in data.columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

# Split features and target
X = data.drop('bp_category', axis=1)
y = data['bp_category']

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -------------------------------
# Step 1: Train initial model
# -------------------------------
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# -------------------------------
# Step 2: Evaluate initial model
# -------------------------------
print("ðŸ“Š Initial Model Performance:")
print(f"Accuracy : {accuracy_score(y_test, y_pred):.2f}")
print(f"Precision: {precision_score(y_test, y_pred, average='weighted'):.2f}")
print(f"Recall   : {recall_score(y_test, y_pred, average='weighted'):.2f}")
print(f"F1 Score : {f1_score(y_test, y_pred, average='weighted'):.2f}")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# -------------------------------
# Step 3: Hyperparameter Tuning
# -------------------------------
param_grid = {
    'max_depth': [3, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'criterion': ['gini', 'entropy']
}

grid_search = GridSearchCV(estimator=DecisionTreeClassifier(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           scoring='accuracy',
                           verbose=1,
                           n_jobs=-1)

grid_search.fit(X_train, y_train)

# Best model
best_model = grid_search.best_estimator_

# -------------------------------
# Step 4: Evaluate best model
# -------------------------------
y_pred_best = best_model.predict(X_test)

print("\nâœ… Best Hyperparameters:", grid_search.best_params_)
print("\nðŸ“ˆ Tuned Model Performance:")
print(f"Accuracy : {accuracy_score(y_test, y_pred_best):.2f}")
print(f"Precision: {precision_score(y_test, y_pred_best, average='weighted'):.2f}")
print(f"Recall   : {recall_score(y_test, y_pred_best, average='weighted'):.2f}")
print(f"F1 Score : {f1_score(y_test, y_pred_best, average='weighted'):.2f}")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred_best))
print("\nClassification Report:\n", classification_report(y_test, y_pred_best))
