# 1. Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
import joblib  # For saving and loading the model

# 2. Sample Dataset
np.random.seed(42)
data = pd.DataFrame({
    'age_group': np.random.choice(['Young', 'Middle', 'Old'], 500),
    'weight_class': np.random.choice(['Underweight', 'Normal', 'Overweight'], 500),
    'smoker': np.random.choice(['Yes', 'No'], 500),
    'activity_level': np.random.choice(['Low', 'Medium', 'High'], 500),
    'bp_category': np.random.choice(['Normal', 'Prehypertension', 'Hypertension'], 500)
})

# 3. Encode Categorical Columns
label_encoders = {}
for col in data.columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

# 4. Feature and Target Split
X = data.drop('bp_category', axis=1)
y = data['bp_category']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Model Training with Hyperparameter Tuning
param_grid = {
    'max_depth': [3, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'criterion': ['gini', 'entropy']
}
grid_search = GridSearchCV(
    estimator=DecisionTreeClassifier(random_state=42),
    param_grid=param_grid,
    cv=5,
    scoring='accuracy',
    n_jobs=-1,
    verbose=1
)
grid_search.fit(X_train, y_train)

# 6. Best Model from Grid Search
best_model = grid_search.best_estimator_

# 7. Evaluate Best Model
y_pred = best_model.predict(X_test)
print("üìä Classification Report:\n", classification_report(y_test, y_pred))
print("‚úÖ Accuracy:", accuracy_score(y_test, y_pred))

# 8. Save the Best Model
joblib.dump(best_model, 'best_bp_model.pkl')
print("\nüì¶ Model saved as 'best_bp_model.pkl'")

# 9. Load the Model Later
loaded_model = joblib.load('best_bp_model.pkl')
new_predictions = loaded_model.predict(X_test)
print("\nüîç Sample Predictions from Loaded Model:", new_predictions[:5])
