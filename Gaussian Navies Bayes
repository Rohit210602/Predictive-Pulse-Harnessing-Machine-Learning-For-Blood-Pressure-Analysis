import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import warnings
warnings.filterwarnings('ignore')

# Simulate dataset with binary target hypertension (1 = hypertensive, 0 = normal)
np.random.seed(42)
data = pd.DataFrame({
    'age': np.random.randint(20, 80, 500),
    'weight': np.random.randint(50, 100, 500),
    'heart_rate': np.random.randint(60, 100, 500),
    'systolic_bp': np.random.normal(120, 15, 500).astype(int),
    'diastolic_bp': np.random.normal(80, 10, 500).astype(int),
    'smoking_status': np.random.choice(['Never', 'Former', 'Current'], 500),
    'exercise_freq': np.random.choice(['Low', 'Moderate', 'High'], 500)
})

# Create binary target: hypertensive if systolic_bp > 130 or diastolic_bp > 80
data['hypertension'] = np.where((data['systolic_bp'] > 130) | (data['diastolic_bp'] > 80), 1, 0)

# Encode categorical variables
le_smoke = LabelEncoder()
le_exercise = LabelEncoder()
data['smoking_status'] = le_smoke.fit_transform(data['smoking_status'])
data['exercise_freq'] = le_exercise.fit_transform(data['exercise_freq'])

# Features and target
X = data.drop(['hypertension', 'systolic_bp', 'diastolic_bp'], axis=1)
y = data['hypertension']

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features (GaussianNB works fine without scaling but can try)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize Gaussian Naive Bayes
gnb = GaussianNB()

# Train the model
gnb.fit(X_train_scaled, y_train)

# Predict
y_pred = gnb.predict(X_test_scaled)

# Evaluate
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {acc:.2f}")
print("Confusion Matrix:\n", cm)
print("Classification Report:\n", report)
