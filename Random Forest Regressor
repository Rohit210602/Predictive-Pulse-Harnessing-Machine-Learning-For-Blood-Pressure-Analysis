import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

# Simulate dataset (replace with your actual dataset)
np.random.seed(42)
data = pd.DataFrame({
    'age': np.random.randint(20, 80, 500),
    'weight': np.random.randint(50, 100, 500),
    'heart_rate': np.random.randint(60, 100, 500),
    'systolic_bp': np.random.normal(120, 15, 500).astype(int),
    'diastolic_bp': np.random.normal(80, 10, 500).astype(int),
    'smoking_status': np.random.choice(['Never', 'Former', 'Current'], 500),
    'exercise_freq': np.random.choice(['Low', 'Moderate', 'High'], 500)
})

# Encode categorical variables
le_smoking = LabelEncoder()
le_exercise = LabelEncoder()
data['smoking_status'] = le_smoking.fit_transform(data['smoking_status'])
data['exercise_freq'] = le_exercise.fit_transform(data['exercise_freq'])

# Features and target
X = data.drop(['systolic_bp', 'diastolic_bp'], axis=1)
y = data['systolic_bp']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features (optional but recommended)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize and train Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

# Predict
y_pred = rf.predict(X_test_scaled)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Random Forest Regressor Performance:")
print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"R2 Score: {r2:.2f}")

# Optional: Plot feature importance
importances = rf.feature_importances_
features = X.columns

plt.figure(figsize=(8,5))
plt.barh(features, importances, color='skyblue')
plt.xlabel('Feature Importance')
plt.title('Feature Importance in Random Forest Regressor')
plt.show()
